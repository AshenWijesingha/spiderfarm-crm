# Generated by Django 2.2.3 on 2019-08-08 09:59

from django.db import migrations, models
import django.db.models.deletion
import spiderfarm.models
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='AssignedZoneFragmentsTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'Assigned zone fragments',
            },
        ),
        migrations.CreateModel(
            name='CertificateProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider_name', models.CharField(max_length=20, unique=True, verbose_name='SSL Cert Provider')),
                ('include_sales', models.BooleanField(default=False, verbose_name='Include in Sales CSV Exports?')),
                ('added_timestamp', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Cert provider added timestamp')),
            ],
        ),
        migrations.CreateModel(
            name='MxServerTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'MX server',
                'verbose_name_plural': 'MX servers',
            },
        ),
        migrations.CreateModel(
            name='NameServerTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'Name server',
                'verbose_name_plural': 'Name servers',
            },
        ),
        migrations.CreateModel(
            name='SanListTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'SAN list',
            },
        ),
        migrations.CreateModel(
            name='TaggedZoneSpiderJobs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='Object id')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spiderfarm_taggedzonespiderjobs_tagged_items', to='contenttypes.ContentType', verbose_name='Content type')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ZoneExtension',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_added', models.DateTimeField(auto_now_add=True, verbose_name='zone added')),
                ('tld_extension', models.CharField(max_length=10, unique=True, verbose_name='TLD Extension')),
                ('domain_extractor', models.CharField(blank=True, max_length=200, null=True, unique=True, verbose_name='Regex extractor for zone fragments')),
                ('storage_path', models.FilePathField(blank=True, default='/home/spiderfarmer/SFCRM/media/uploads/zone_files', match='\\.txt$', path='/home/spiderfarmer/SFCRM/media/uploads/zone_files')),
            ],
        ),
        migrations.CreateModel(
            name='ZoneSpiderJobTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'Spider Jobs',
            },
        ),
        migrations.CreateModel(
            name='ZoneFragment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unique_domains', models.IntegerField(blank=True, null=True, verbose_name='Unique domains')),
                ('upload_timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Upload timestamp')),
                ('zone_file', models.FileField(upload_to=spiderfarm.models.tld_zone_path, verbose_name='Zonefile fragment')),
                ('zone_signature', models.CharField(blank=True, max_length=40, null=True, unique=True, verbose_name='Zone fragment checksum')),
                ('spider_jobs', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='spiderfarm.TaggedZoneSpiderJobs', to='spiderfarm.ZoneSpiderJobTag', verbose_name='Spider jobs')),
                ('tld_ext', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='zonefrag_tld', to='spiderfarm.ZoneExtension')),
            ],
        ),
        migrations.AddField(
            model_name='taggedzonespiderjobs',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='zone_spider_jobs', to='spiderfarm.ZoneSpiderJobTag'),
        ),
        migrations.CreateModel(
            name='TaggedSanEntries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='Object id')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spiderfarm_taggedsanentries_tagged_items', to='contenttypes.ContentType', verbose_name='Content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='domain_san_list', to='spiderfarm.SanListTag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaggedNameServers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='Object id')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spiderfarm_taggednameservers_tagged_items', to='contenttypes.ContentType', verbose_name='Content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='domain_name_servers', to='spiderfarm.NameServerTag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaggedMxServers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='Object id')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spiderfarm_taggedmxservers_tagged_items', to='contenttypes.ContentType', verbose_name='Content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='domain_mx_servers', to='spiderfarm.MxServerTag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaggedAssignedZoneFragments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='Object id')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spiderfarm_taggedassignedzonefragments_tagged_items', to='contenttypes.ContentType', verbose_name='Content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='assigned_zone_frags', to='spiderfarm.AssignedZoneFragmentsTag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SpiderJob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('spider_type', models.CharField(choices=[('GHOST', 'GHOST'), ('IMPORT', 'IMPORT'), ('UPDATE', 'UPDATE')], default='IMPORT', max_length=25, verbose_name='Spider type')),
                ('start_timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Start timestamp')),
                ('end_timestamp', models.DateTimeField(blank=True, null=True, verbose_name='End timestamp')),
                ('celery_id', models.CharField(blank=True, max_length=36, null=True, verbose_name='Celery worker ID ')),
                ('crawl_type', models.CharField(choices=[('ZONE', 'ZONE'), ('DOMAIN', 'DOMAIN')], default='ZONE', max_length=25, verbose_name='Crawl type')),
                ('data_type', models.CharField(choices=[('SSL', 'SSL'), ('HOST', 'HOST'), ('WEB', 'WEB')], default='SSL', max_length=25, verbose_name='Data type')),
                ('job_status', models.CharField(choices=[('RUNNING', 'RUNNING'), ('COMPLETE', 'COMPLETE'), ('PENDING', 'PENDING')], default='PENDING', max_length=25, verbose_name='Job status')),
                ('assigned_zones', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='spiderfarm.TaggedAssignedZoneFragments', to='spiderfarm.AssignedZoneFragmentsTag', verbose_name='Assigned zone fragments')),
            ],
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain_name', models.URLField(unique=True)),
                ('domain_common', models.CharField(blank=True, max_length=200, null=True, verbose_name='Non-prefixed domain')),
                ('redirect_url', models.URLField(blank=True, null=True, verbose_name='Redirects to')),
                ('time_added', models.DateTimeField(auto_now_add=True, verbose_name='Domain added')),
                ('last_export', models.DateTimeField(blank=True, null=True, verbose_name='Last export time')),
                ('ssl_expire', models.DateTimeField(blank=True, null=True, verbose_name='SSL expire time')),
                ('ssl_issuer_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Issuer name')),
                ('ssl_issuer_org_unit', models.CharField(blank=True, max_length=50, null=True, verbose_name='Issuer org unit')),
                ('ssl_url', models.CharField(blank=True, max_length=200, null=True, verbose_name='Primary ssl domain')),
                ('domain_expire', models.DateTimeField(blank=True, null=True, verbose_name='Domain expire date')),
                ('server_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Server type')),
                ('domain_registrar', models.CharField(blank=True, max_length=50, null=True, verbose_name='Domain registrar')),
                ('registrar_url', models.URLField(blank=True, null=True, verbose_name='Registrar URL')),
                ('registrant_country', models.CharField(blank=True, max_length=50, null=True, verbose_name='Registrant country')),
                ('registrant_email', models.CharField(blank=True, max_length=200, null=True, verbose_name='Registrant email')),
                ('geoip_country', models.CharField(blank=True, max_length=200, null=True, verbose_name='GeoIP country')),
                ('geoip_geocode', models.CharField(blank=True, max_length=200, null=True, verbose_name='GeoIP country code')),
                ('site_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='Current IP')),
                ('last_ssl_update', models.DateTimeField(blank=True, null=True, verbose_name='Last SSL update')),
                ('last_whois_update', models.DateTimeField(blank=True, null=True, verbose_name='Last WHOIS update')),
                ('last_geoip_update', models.DateTimeField(blank=True, null=True, verbose_name='Last GeoIP update')),
                ('mx_servers', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='spiderfarm.TaggedMxServers', to='spiderfarm.MxServerTag', verbose_name='MX servers')),
                ('name_servers', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='spiderfarm.TaggedNameServers', to='spiderfarm.NameServerTag', verbose_name='Name servers')),
                ('ssl_san', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='spiderfarm.TaggedSanEntries', to='spiderfarm.SanListTag', verbose_name='SAN list')),
                ('tld_ext', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tld_ext', to='spiderfarm.ZoneExtension')),
            ],
        ),
    ]
